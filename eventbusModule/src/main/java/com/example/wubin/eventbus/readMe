


EventBus3.0有四种线程模型，分别是：

POSTING (默认)  表示事件处理函数的线程跟发布事件的线程在同一个线程。
MAIN 表示事件处理函数的线程在主线程(UI)线程，因此在这里不能进行耗时操作。
BACKGROUND 表示事件处理函数的线程在后台线程，因此不能进行UI操作。如果发布事件的线程是主线程(UI线程)，那么事件处理函数将会开启一个后台线程，
            如果果发布事件的线程是在后台线程，那么事件处理函数就使用该线程。
ASYNC 表示无论事件发布的线程是哪一个，事件处理函数始终会新建一个子线程运行，同样不能进行UI操作。

1.添加依赖
implementation 'org.greenrobot:eventbus:3.1.1'

2.自定义消息类
  可以定义不同消息类 响应只会在同一消息类内部 不同消息类之间的EventBus不会互相干扰
public class MessageEvent {

    public int what;
    public String msg;

}

3.注册
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_event_bus);

        ButterKnife.bind(this);

        EventBus.getDefault().register(this);

    }

4.销毁
    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (EventBus.getDefault().isRegistered(this)) {
            EventBus.getDefault().unregister(this);
        }
    }

5.在 A activity 中订阅
    @Subscribe(threadMode = ThreadMode.MAIN)
    public void Event(MessageEvent event) {
        if (event.what == 1) {
            tv.setText(event.msg);
        }
    }

6.在 B acivity 中发送
    @OnClick(R.id.activity_event_bus_btn)
    void onClick(View view) {
        MessageEvent event = new MessageEvent();
        event.msg = "xxx";
        event.what = 1;
        EventBus.getDefault().post(event);
    }