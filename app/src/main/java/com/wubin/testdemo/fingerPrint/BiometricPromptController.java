package com.wubin.testdemo.fingerPrint;

import android.annotation.TargetApi;
import android.app.KeyguardManager;
import android.os.Build;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.util.Base64;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.ECGenParameterSpec;

/**
 * @author wubin
 * @description
 * @date 2019-05-09
 */

@TargetApi(28)
public class BiometricPromptController {

    AppCompatActivity mActivity;

    private static final String KEY_NAME = "BiometricPromptApi28";
    private String mToBeSignedMessage;

    public BiometricPromptController(AppCompatActivity activity) {
        this.mActivity = activity;
    }

    public void init() {

        if (supportFingerprint()) {
            initKey();
            initSignature(KEY_NAME);
        }

    }

    public boolean supportFingerprint() {
        if (Build.VERSION.SDK_INT < 28) {
            Toast.makeText(mActivity, "您的系统版本过低，不支持指纹功能", Toast.LENGTH_SHORT).show();
            return false;
        } else {

            KeyguardManager keyguardManager = mActivity.getSystemService(KeyguardManager.class); // 判断锁屏


            if (!keyguardManager.isKeyguardSecure()) {
                Toast.makeText(mActivity, "您还未设置锁屏，请先设置锁屏并添加一个指纹", Toast.LENGTH_SHORT).show();
                return false;
            }

        }

        return true;
    }

    private void initKey() {
        KeyPair keyPair = generateKeyPair(KEY_NAME, true);
        // Send public key part of key pair to the server, this public key will be used for authentication
        mToBeSignedMessage = new StringBuilder()
                .append(Base64.encodeToString(keyPair.getPublic().getEncoded(), Base64.URL_SAFE))
                .append(":")
                .append(KEY_NAME)
                .append(":")
                // Generated by the server to protect against replay attack
                .append("12345")
                .toString();

    }

    /**
     * Generate NIST P-256 EC Key pair for signing and verification
     *
     * @param keyName
     * @param invalidatedByBiometricEnrollment
     * @return
     */
    private KeyPair generateKeyPair(String keyName, boolean invalidatedByBiometricEnrollment) {
        try {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, "AndroidKeyStore");

            KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(keyName,
                    KeyProperties.PURPOSE_SIGN)
                    .setAlgorithmParameterSpec(new ECGenParameterSpec("secp256r1"))
                    .setDigests(KeyProperties.DIGEST_SHA256,
                            KeyProperties.DIGEST_SHA384,
                            KeyProperties.DIGEST_SHA512)
                    // Require the user to authenticate with a biometric to authorize every use of the key
                    .setUserAuthenticationRequired(true)
                    .setInvalidatedByBiometricEnrollment(invalidatedByBiometricEnrollment);

            keyPairGenerator.initialize(builder.build());

            return keyPairGenerator.generateKeyPair();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Nullable
    private void initSignature(String keyName) {
        try {
            KeyPair keyPair = getKeyPair(keyName);

            if (keyPair != null) {
                Signature signature = Signature.getInstance("SHA256withECDSA");
                signature.initSign(keyPair.getPrivate());

                showFingerPrintDialog(signature);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Nullable
    private KeyPair getKeyPair(String keyName) throws Exception {
        KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
        keyStore.load(null);
        if (keyStore.containsAlias(keyName)) {
            // Get public key
            PublicKey publicKey = keyStore.getCertificate(keyName).getPublicKey();
            // Get private key
            PrivateKey privateKey = (PrivateKey) keyStore.getKey(keyName, null);
            // Return a key pair
            return new KeyPair(publicKey, privateKey);
        }
        return null;
    }

    private void showFingerPrintDialog(Signature signature) {

        BilmetricPromptDialogFragment fragment = new BilmetricPromptDialogFragment();
        fragment.setSignature(signature);
        fragment.show(mActivity.getSupportFragmentManager(), "fingerprint");
        fragment.setCancelable(false);

    }

}
