

1.
    Android的Webview在低版本和高版本采用了不同的webkit版本内核，4.4后直接使用了Chrome。

2.
    Webview的最常用的子类 :（WebSettings类、WebViewClient类、WebChromeClient类)

3. WebView的状态

    // 激活WebView为活跃状态，能正常执行网页的响应
    webView.onResume() ；

    // 当页面被失去焦点被切换到后台不可见状态，需要执行onPause
    // 通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。
    webView.onPause()；

    // 当应用程序(存在webview)被切换到后台时，这个方法不仅仅针对当前的webview而是全局的全应用程序的webview
    // 它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。
    webView.pauseTimers()
    // 恢复pauseTimers状态
    webView.resumeTimers()；

    // 销毁Webview
    // 在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview
    // 但是注意：webview调用destory时,webview仍绑定在Activity上
    // 这是由于自定义webview构建时传入了该Activity的context对象
    // 因此需要先从父容器中移除webview,然后再销毁webview:
    rootLayout.removeView(webView);
    webView.destroy();

4.关于前进 / 后退网页

    // 是否可以后退
    Webview.canGoBack()
    // 后退网页
    Webview.goBack()

    // 是否可以前进
    Webview.canGoForward()
    // 前进网页
    Webview.goForward()

    // 以当前的index为起始点前进或者后退到历史记录中指定的steps
    // 如果steps为负数则为后退，正数则为前进
    Webview.goBackOrForward(intsteps)

5.后退

    问题: 在不做任何处理前提下 ，浏览网页时点击系统的“Back”键,整个 Browser 会调用 finish()而结束自身
    目标：点击返回后，是网页回退而不是推出浏览器
    解决方案：在当前Activity中处理并消费掉该 Back 事件

    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if ((keyCode == KEYCODE_BACK) && mWebView.canGoBack()) {
            mWebView.goBack();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

6.清除缓存数据

  // 清除网页访问留下的缓存
  // 由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.
  Webview.clearCache(true);

  // 清除当前webview访问的历史记录
  // 只会webview访问历史记录里的所有记录除了当前访问记录
  Webview.clearHistory()；

  // 这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据
  Webview.clearFormData()；

7.webview load

    // 定义Webview组件
    Webview webview = (WebView) findViewById(R.id.webView1);

    // 方式1. 加载一个网页：
      webView.loadUrl("http://www.google.com/");

    // 方式2：加载apk包中的html页面
      webView.loadUrl("file:///android_asset/test.html");

    // 方式3：加载手机本地的html页面
       webView.loadUrl("content://com.android.htmlfileprovider/sdcard/test.html");

8.WebViewClient类

    // 使得打开网页时不调用系统浏览器， 而是在本WebView中显示
        webView.setWebViewClient(new WebViewClient(){
          @Override
          public boolean shouldOverrideUrlLoading(WebView view, String url) {
              view.loadUrl(url);
               return true;
          }
      });

    // 作用：开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。
     webView.setWebViewClient(new WebViewClient(){
          @Override
          public void  onPageStarted(WebView view, String url, Bitmap favicon) {
             //设定加载开始的操作
          }
      });

    // 作用：在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。
        webView.setWebViewClient(new WebViewClient(){
          @Override
          public void onPageFinished(WebView view, String url) {
             //设定加载结束的操作
          }
      });

    // 作用：在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。
        webView.setWebViewClient(new WebViewClient(){
          @Override
          public boolean onLoadResource(WebView view, String url) {
             //设定加载资源的操作
          }
      });

    // App里面使用webview控件的时候遇到了诸如404这类的错误的时候，若也显示浏览器里面的那种错误提示页面就显得很丑陋了，
    // 那么这个时候我们的app就需要加载一个本地的错误提示页面，即webview如何加载一个本地的页面
        步骤1：写一个html文件（error_handle.html），用于出错时展示给用户看的提示页面
        步骤2：将该html文件放置到代码根目录的assets文件夹下
        步骤3：复写WebViewClient的onRecievedError方法
        该方法传回了错误码，根据错误类型可以进行不同的错误分类处理
    webView.setWebViewClient(new WebViewClient(){
         @Override
         public void onReceivedError(WebView view, int errorCode, String description, String failingUrl){
                switch(errorCode) {
                   case HttpStatus.SC_NOT_FOUND:
                       view.loadUrl("file:///android_assets/error_handle.html");
                       break;
                   }
               }
           });

   // webView默认是不处理https请求的，页面显示空白，需要进行如下设置：
   webView.setWebViewClient(new WebViewClient() {
           @Override
           public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
               handler.proceed();    //表示等待证书响应
           // handler.cancel();      //表示挂起连接，为默认方式
           // handler.handleMessage(null);    //可做其他处理
           }
       });

9.WebChromeClient类

    获得网页的加载进度并显示
    webview.setWebChromeClient(new WebChromeClient(){

          @Override
          public void onProgressChanged(WebView view, int newProgress) {
              if (newProgress < 100) {
                  String progress = newProgress + "%";
                  progress.setText(progress);
                } else {
              }
        });

    作用：获取Web页中的标题
     每个网页的页面都有一个标题，比如www.baidu.com这个页面的标题即“百度一下，你就知道”，
     那么如何知道当前webview正在加载的页面的title并进行设置呢？
    webview.setWebChromeClient(new WebChromeClient(){

        @Override
        public void onReceivedTitle(WebView view, String title) {
           titleview.setText(title)；
        }

10. 销毁

    在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空。
    @Override
        protected void onDestroy() {
            if (mWebView != null) {
                mWebView.loadDataWithBaseURL(null, "", "text/html", "utf-8", null);
                mWebView.clearHistory();

                ((ViewGroup) mWebView.getParent()).removeView(mWebView);
                mWebView.destroy();
                mWebView = null;
            }
            super.onDestroy();
        }